@model KvotaWeb.Models.Items.Decol

<form id="myform" method="post" action="/Product/EditЗначки">
    @Html.AntiForgeryToken()

    <div class="form-horizontal col-sm-8 col-sm-push-2">
        <hr />
        <h4>Элемент @Html.ActionLink(" заказа № " + @Model.ZakazId, "Edit", "Home", new { id = @Model.ZakazId }, null)</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.ZakazId)
        @Html.HiddenFor(model => model.TipProd)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            <div class="control-label col-sm-5">
                @Html.LabelFor(model => model.Tiraz)
            </div>
            <div class="col-sm-7">
                @Html.EditorFor(model => model.Tiraz, new { htmlAttributes = new { @class = "form-control", @onkeyup = "OnChangeEvent();" } })
                @Html.ValidationMessageFor(model => model.Tiraz, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-5">
                @Html.LabelFor(model => model.Vid)
            </div>
            <div class="col-sm-7">
                @Html.DropDownListFor(model => model.Vid, @ViewData["params1"] as SelectList, "(не выбрано)", new { @id = "param1", @class = "form-control", @onchange = "OnChangeParam1Event();" })
                @Html.ValidationMessageFor(model => model.Vid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-5">
                @Html.LabelFor(model => model.KolichestvoTcvetov)
            </div>
            <div class="col-sm-7">
                @Html.DropDownListFor(model => model.KolichestvoTcvetov, @ViewData["params2"] as SelectList, "(не выбрано)", new { @id = "param2", @class = "form-control", @onchange = "OnChangeEvent();" })
                @Html.ValidationMessageFor(model => model.KolichestvoTcvetov, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="DiametrParamDiv" style=@ViewData["DiametrParamDivStyle"]>
            <div class="control-label col-sm-5">
                @Html.LabelFor(model => model.Diametr)
            </div>
            <div class="col-sm-7">
                @Html.DropDownListFor(model => model.Diametr, @ViewData["params21"] as SelectList, "(не выбрано)", new { @id = "param21", @class = "form-control", @onchange = "OnChangeEvent();" })
                @Html.ValidationMessageFor(model => model.Diametr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-sm-5">
                @Html.LabelFor(model => model.Ploshad)
            </div>
            <div class="col-sm-7">
                @Html.EditorFor(model => model.Ploshad, new { htmlAttributes = new { @class = "form-control", @onkeyup = "OnChangeEvent();" } })
                @Html.ValidationMessageFor(model => model.Ploshad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="paramDiv4" style=@ViewData["paramDivStyle4"] align="left">
            @*<label class="col-md-offset-5 col-md-7 col-sm-offset-5 col-sm-7">
                @Html.EditorFor(model => model.Zolotoi, new { htmlAttributes = new { @id = "param4", @class = "form-check-input", @onchange = "OnChangeEvent();" } })
                <label for="param4" id="paramLabel4">@Html.LabelFor(model => model.Zolotoi)</label>
            </label>*@
            <div class="col-md-offset-5 col-md-7 col-sm-offset-5 col-sm-7">
                @Html.EditorFor(model => model.Zolotoi, new { htmlAttributes = new { @onchange = "OnChangeEvent();" } })
                @Html.LabelFor(model => model.Zolotoi)
            </div>
        </div>

        <div id="totalResultsDiv">
            @Html.Action("Recalc", "Product", new { totals = @Model.GetTotal() })
        </div>

        <div class="form-group">
            <label class="control-label col-sm-5">Срок изготовления:</label>
            <label class="control-label col-sm-7" style="text-align:left;">@Model.Srok </label>
        </div>
        <!--div class="form-group">
        <div class="col-sm-offset-5 col-sm-7">
            <input type="submit" value="Сохранить" class="btn  btn-primary" />
        </div>
    </div-->
    </div>
</form>
<script type="text/javascript">
        function OnChangeParam1Event() {
            //var catId = $(this).val();
            var catId = $('#param1').val();
                var url = '@Url.Action("fillParam2", "Product")';
                $.getJSON(url, { catId: catId }, function (result) {
                    var ddl = $('#param2');
                    ddl.empty();
                    $(result).each(function () {
                        $(document.createElement('option')).attr('value', this.id).text(this.tip).appendTo(ddl);
                    });
                    OnChangeEvent();
                    $('#param2').focus();
            });
            if (catId == 307)
                document.getElementById('DiametrParamDiv').style.display = "none";
            else
                document.getElementById('DiametrParamDiv').style.display = "block";
        }
        function OnChangeEvent() {
            $("body").css("cursor", "progress");
            $.ajax({
                type: 'POST',
                url: "/Product/Recalc",
                data: $('#myform').serialize(),
                success: function (data, res) {
                    $("#totalResultsDiv").html(data);
                    $("body").css("cursor", "default");
                },
                error: function () {
                    alert("There was an error submitting comment");
                    $("body").css("cursor", "default");
                }
            });
        }
</script>

